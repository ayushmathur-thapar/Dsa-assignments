

// Question 2
#include <iostream>
using namespace std ;

void bubbleSort(int arr[] , int n){
    for(int i =0 ; i<n-1 ; i++){
        for(int j = 0 ; j<n-i-1 ;j++){
            if(arr[j]>arr[j+1]){
                int temp = arr[j] ; 
                arr[j]=arr[j+1];
                arr[j+1]= temp ;
            }
        }
    }
}
int main() {
  int arr[] = {12,15,42,31,98,41,0,78,9};
  int n = sizeof(arr)/sizeof(arr[0]) ; 
  
  cout<<"orignal array :";
  for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;

  bubbleSort(arr,n) ;

  cout<<"updated array :";
  for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
    return 0;
}

// Question 3 (A)
int findMissingLinear(const int arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        if (arr[i] != i + 1) {
            return i + 1;
        }
    }
    return n; 
}
// Time complexity O(N)

// Question 3 (B)
#include <iostream>
using namespace std;
int findMissingNumber(int arr[], int size) {
    int low = 0, high = size - 1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == mid + 1)
            low = mid + 1;
        else
            high = mid - 1;
    }
    return low + 1;
}
int main() {
    int arr[] = {1, 2, 3, 5, 6};
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << "Missing number is: " << findMissingNumber(arr, size) << "\n";
    return 0;
}
// Time Complexity O(LOGn)

// Question 4 (a)
#include <iostream>
#include <cstring>
using namespace std ;
int main() {
    char str1[100] = "Hello ";
    char str2[] = "World!";
    strcat(str1, str2); 
    cout << "Concatenated String: " << str1 << std::endl;
    return 0;
}

// Question 4 (b)
#include <iostream>
#include <cstring>
using namespace std;
int main() {
    char str[] = "example";
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        char temp = str[i];
        str[i] = str[len - 1 - i];
        str[len - 1 - i] = temp;
    }
    cout << "Reversed String: " << str << std::endl;
    return 0;
}

// Question 4 (d)
#include <iostream>
#include <algorithm>
int main() {
    char str[] = "dcba";
    int len = strlen(str);
    sort(str, str + len); 
    cout << "Sorted String: " << str << endl;
    return 0;
}

// Without algorithm
#include <iostream>
#include <cstring>
int main() {
    char str[] = "dcba";
    int len = strlen(str);
    for (int i = 0; i < len - 1; ++i) {
        for (int j = 0; j < len - i - 1; ++j) {
            if (str[j] > str[j + 1]) {
                char temp = str[j];
                str[j] = str[j + 1];
                str[j + 1] = temp;
            }
        }
    }
    cout << "Sorted String: " << str << endl;
    return 0;
}

// Question 4 (e)
#include <iostream>
int main() {
    char ch = 'A';
    if (ch >= 'A' && ch <= 'Z') {
        ch = ch + 32;  
    }
    cout << "Lowercase: " << ch << endl;
    return 0;
}

// Question 5 (a)
#include <iostream>
using namespace std;
int main() {
    int n = 4;
    int diagonal[4] = {5, 8, 3, 6}; 
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (i == j)
                cout << diagonal[i - 1] << " ";
            else
                cout << 0 << " ";
        }
        cout << endl;
    }
    return 0;
}

// Question 7
#include <iostream>
#include <string>
using namespace std;
int main() {
    string str1, str2;
    cout << "Enter first string: ";
    getline(cin, str1);
    cout << "Enter second string: ";
    getline(cin, str2);
    cout << "You entered:\n";
    cout << "First string: " << str1 << "\n";
    cout << "Second string: " << str2 << "\n";
    return 0;
}

// Question 8
#include <iostream>
using namespace std;
int main() {
    int n;
    cout << "Enter the length of array: ";
    cin >> n;
    int arr[n];
    cout << "Enter " << n << " elements:\n";
    for (int i = 0; i < n; i++)
        cin >> arr[i];
    int count = 0;
    for (int i = 0; i < n; i++) {
        bool isDistinct = true;
        for (int j = 0; j < i; j++) {
            if (arr[i] == arr[j]) {
                isDistinct = false;
                break;
            }
        }
        if (isDistinct)
            count++;
    }
    cout << "Total distinct elements: " << count << endl;
    return 0;
}

// Extra Question 4
#include <iostream>
#include <vector>
using namespace std;
void sort012(vector<int> &arr) {
    int n = arr.size();
    int c0 = 0, c1 = 0, c2 = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i] == 0)
            c0 += 1;
        else if (arr[i] == 1)
            c1 += 1;
        else
            c2 += 1;
    }
    int idx = 0;
    for (int i = 0; i < c0; i++)
        arr[idx++] = 0;
    for (int i = 0; i < c1; i++)
        arr[idx++] = 1;
    for (int i = 0; i < c2; i++)
        arr[idx++] = 2;
}
int main() {
    vector<int> arr = { 0, 1, 2, 0, 1, 2 };
    sort012(arr);
    for (int i = 0; i < arr.size(); i++)
        cout << arr[i] << " ";
    return 0;
}

// Extra Question 5
class Solution {
public:
    void duplicateZeros(vector<int>& arr) {
        int n = arr.size();
        vector<int> nawarr(n);
        int j = 0;
        for(int i = 0; i < n; i++) {
            if(arr[i] == 0) {
                if(j < n) {
                    nawarr[j++] = 0;
                }
                if(j < n) {
                    nawarr[j++] = 0;
                }
            } else {
                if(j < n) {
                    nawarr[j++] = arr[i];
                }
            }
        }
        for(int i = 0; i < n; i++) {
            arr[i] = nawarr[i];
        }
    }
};
